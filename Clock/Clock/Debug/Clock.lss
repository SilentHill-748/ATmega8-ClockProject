
Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000650  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00000650  000006e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002e  00800092  00800092  00000716  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000716  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000748  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e2d  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000782  00000000  00000000  000016a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000810  00000000  00000000  00001e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000290  00000000  00000000  0000263c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042c  00000000  00000000  000028cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000073d  00000000  00000000  00002cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003435  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	e0 c2       	rjmp	.+1472   	; 0x5c4 <__vector_1>
   4:	b7 c2       	rjmp	.+1390   	; 0x574 <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 e5       	ldi	r30, 0x50	; 80
  3a:	f6 e0       	ldi	r31, 0x06	; 6
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 39       	cpi	r26, 0x92	; 146
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a2 e9       	ldi	r26, 0x92	; 146
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 3c       	cpi	r26, 0xC0	; 192
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	d8 d2       	rcall	.+1456   	; 0x60a <main>
  5a:	f8 c2       	rjmp	.+1520   	; 0x64c <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <DS1307Read>:
void DS1307Read(char address, char *data);
void DS1307Write(char address, char data);

// Функция чтения данных из DS1307
void DS1307Read(char address, char *data)
{
  5e:	1f 93       	push	r17
  60:	cf 93       	push	r28
  62:	df 93       	push	r29
  64:	18 2f       	mov	r17, r24
  66:	eb 01       	movw	r28, r22
	I2CStart();
  68:	2b d0       	rcall	.+86     	; 0xc0 <I2CStart>
	I2CWriteByte(0b11010000);
  6a:	80 ed       	ldi	r24, 0xD0	; 208
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	34 d0       	rcall	.+104    	; 0xd8 <I2CWriteByte>
	I2CWriteByte(address);
  70:	81 2f       	mov	r24, r17
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	31 d0       	rcall	.+98     	; 0xd8 <I2CWriteByte>
	I2CStart();
  76:	24 d0       	rcall	.+72     	; 0xc0 <I2CStart>
	I2CWriteByte(0b11010001);
  78:	81 ed       	ldi	r24, 0xD1	; 209
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	2d d0       	rcall	.+90     	; 0xd8 <I2CWriteByte>
	I2CReadByte(data);
  7e:	ce 01       	movw	r24, r28
  80:	32 d0       	rcall	.+100    	; 0xe6 <I2CReadByte>
	I2CStop();
  82:	24 d0       	rcall	.+72     	; 0xcc <I2CStop>
}
  84:	df 91       	pop	r29
  86:	cf 91       	pop	r28
  88:	1f 91       	pop	r17
  8a:	08 95       	ret

0000008c <DS1307Write>:

// Функция записи данных в DS1307
void DS1307Write(char address, char data)
{
  8c:	cf 93       	push	r28
  8e:	df 93       	push	r29
  90:	d8 2f       	mov	r29, r24
  92:	c6 2f       	mov	r28, r22
	I2CStart();
  94:	15 d0       	rcall	.+42     	; 0xc0 <I2CStart>
	I2CWriteByte(0b11010000);
  96:	80 ed       	ldi	r24, 0xD0	; 208
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	1e d0       	rcall	.+60     	; 0xd8 <I2CWriteByte>
	I2CWriteByte(address);
  9c:	8d 2f       	mov	r24, r29
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	1b d0       	rcall	.+54     	; 0xd8 <I2CWriteByte>
	I2CWriteByte(data);
  a2:	8c 2f       	mov	r24, r28
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	18 d0       	rcall	.+48     	; 0xd8 <I2CWriteByte>
	I2CStop();
  a8:	11 d0       	rcall	.+34     	; 0xcc <I2CStop>
  aa:	df 91       	pop	r29
  ac:	cf 91       	pop	r28
  ae:	08 95       	ret

000000b0 <I2CInit>:
char ConvertBcdToDec(char bcd);
char ConvertDecToBcd(char dec);

void I2CInit(void)
{
	TWBR = 2; // Настройка частоты шины
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	80 b9       	out	0x00, r24	; 0
	TWSR = (1 << TWPS1)|(1 << TWPS0); // Предделитель на 64
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	81 b9       	out	0x01, r24	; 1
	TWCR |= (1 << TWEN); // Включение модуля TWI
  b8:	86 b7       	in	r24, 0x36	; 54
  ba:	84 60       	ori	r24, 0x04	; 4
  bc:	86 bf       	out	0x36, r24	; 54
  be:	08 95       	ret

000000c0 <I2CStart>:
}

// Функция СТАРТ
void I2CStart(void)
{
	TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWSTA);
  c0:	84 ea       	ldi	r24, 0xA4	; 164
  c2:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1 << TWINT)));
  c4:	06 b6       	in	r0, 0x36	; 54
  c6:	07 fe       	sbrs	r0, 7
  c8:	fd cf       	rjmp	.-6      	; 0xc4 <I2CStart+0x4>
}
  ca:	08 95       	ret

000000cc <I2CStop>:

// Функция СТОП
void I2CStop(void)
{
	TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWSTO);
  cc:	84 e9       	ldi	r24, 0x94	; 148
  ce:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1 << TWSTO));
  d0:	06 b6       	in	r0, 0x36	; 54
  d2:	04 fc       	sbrc	r0, 4
  d4:	fd cf       	rjmp	.-6      	; 0xd0 <I2CStop+0x4>
}
  d6:	08 95       	ret

000000d8 <I2CWriteByte>:

// Функция записи данных по шине
void I2CWriteByte(char data)
{
	TWDR = data;
  d8:	83 b9       	out	0x03, r24	; 3
	TWCR = (1 << TWEN)|(1 << TWINT);
  da:	84 e8       	ldi	r24, 0x84	; 132
  dc:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1 << TWINT)));
  de:	06 b6       	in	r0, 0x36	; 54
  e0:	07 fe       	sbrs	r0, 7
  e2:	fd cf       	rjmp	.-6      	; 0xde <I2CWriteByte+0x6>
}
  e4:	08 95       	ret

000000e6 <I2CReadByte>:

// Функция чтения данных по шине
void I2CReadByte(char *data)
{
  e6:	fc 01       	movw	r30, r24
	TWCR |= (1 << TWINT);
  e8:	96 b7       	in	r25, 0x36	; 54
  ea:	90 68       	ori	r25, 0x80	; 128
  ec:	96 bf       	out	0x36, r25	; 54
	while(!(TWCR & (1 << TWINT)));
  ee:	06 b6       	in	r0, 0x36	; 54
  f0:	07 fe       	sbrs	r0, 7
  f2:	fd cf       	rjmp	.-6      	; 0xee <I2CReadByte+0x8>
	*data = TWDR;
  f4:	83 b1       	in	r24, 0x03	; 3
  f6:	80 83       	st	Z, r24
  f8:	08 95       	ret

000000fa <ConvertBcdToDec>:
}

char ConvertBcdToDec(char bcd)
{
	char result = ((((bcd & 0xF0) >> 4) * 10) + (bcd & 0x0F));
  fa:	98 2f       	mov	r25, r24
  fc:	92 95       	swap	r25
  fe:	9f 70       	andi	r25, 0x0F	; 15
 100:	99 0f       	add	r25, r25
 102:	29 2f       	mov	r18, r25
 104:	22 0f       	add	r18, r18
 106:	22 0f       	add	r18, r18
 108:	92 0f       	add	r25, r18
 10a:	8f 70       	andi	r24, 0x0F	; 15
	return result;
}
 10c:	89 0f       	add	r24, r25
 10e:	08 95       	ret

00000110 <ConvertDecToBcd>:

char ConvertDecToBcd(char dec)
{
	char result = (((dec / 10) << 4) + (0x0F & (dec % 10)));
 110:	9d ec       	ldi	r25, 0xCD	; 205
 112:	89 9f       	mul	r24, r25
 114:	91 2d       	mov	r25, r1
 116:	11 24       	eor	r1, r1
 118:	96 95       	lsr	r25
 11a:	96 95       	lsr	r25
 11c:	96 95       	lsr	r25
 11e:	39 2f       	mov	r19, r25
 120:	33 0f       	add	r19, r19
 122:	23 2f       	mov	r18, r19
 124:	22 0f       	add	r18, r18
 126:	22 0f       	add	r18, r18
 128:	23 0f       	add	r18, r19
 12a:	82 1b       	sub	r24, r18
 12c:	8f 70       	andi	r24, 0x0F	; 15
	return result;
 12e:	20 e1       	ldi	r18, 0x10	; 16
 130:	92 9f       	mul	r25, r18
 132:	80 0d       	add	r24, r0
 134:	11 24       	eor	r1, r1
 136:	08 95       	ret

00000138 <Framing>:
void SPISendByte(unsigned char byte);

void Framing()
{
	int i, j, k;
	for (i = 0, j = 0, k = 0; i < 32; i++)
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	2c c0       	rjmp	.+88     	; 0x19e <Framing+0x66>
	{
		if ((i != 10) && (i != 21))
 146:	2a 30       	cpi	r18, 0x0A	; 10
 148:	31 05       	cpc	r19, r1
 14a:	11 f1       	breq	.+68     	; 0x190 <Framing+0x58>
 14c:	25 31       	cpi	r18, 0x15	; 21
 14e:	31 05       	cpc	r19, r1
 150:	f9 f0       	breq	.+62     	; 0x190 <Framing+0x58>
		{
			dataRows[i] = digitNums[time[j]][k];
 152:	fb 01       	movw	r30, r22
 154:	e6 56       	subi	r30, 0x66	; 102
 156:	ff 4f       	sbci	r31, 0xFF	; 255
 158:	80 81       	ld	r24, Z
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	fc 01       	movw	r30, r24
 15e:	ee 0f       	add	r30, r30
 160:	ff 1f       	adc	r31, r31
 162:	ee 0f       	add	r30, r30
 164:	ff 1f       	adc	r31, r31
 166:	e8 0f       	add	r30, r24
 168:	f9 1f       	adc	r31, r25
 16a:	e0 5a       	subi	r30, 0xA0	; 160
 16c:	ff 4f       	sbci	r31, 0xFF	; 255
 16e:	e4 0f       	add	r30, r20
 170:	f5 1f       	adc	r31, r21
 172:	80 81       	ld	r24, Z
 174:	f9 01       	movw	r30, r18
 176:	e0 56       	subi	r30, 0x60	; 96
 178:	ff 4f       	sbci	r31, 0xFF	; 255
 17a:	80 83       	st	Z, r24
			k++;
 17c:	4f 5f       	subi	r20, 0xFF	; 255
 17e:	5f 4f       	sbci	r21, 0xFF	; 255
			
			if (k == 5)
 180:	45 30       	cpi	r20, 0x05	; 5
 182:	51 05       	cpc	r21, r1
 184:	51 f4       	brne	.+20     	; 0x19a <Framing+0x62>
			{
				j++;
 186:	6f 5f       	subi	r22, 0xFF	; 255
 188:	7f 4f       	sbci	r23, 0xFF	; 255
				k = 0;
 18a:	40 e0       	ldi	r20, 0x00	; 0
 18c:	50 e0       	ldi	r21, 0x00	; 0
 18e:	05 c0       	rjmp	.+10     	; 0x19a <Framing+0x62>
			}
		}
		else
		{
			dataRows[i] = 0b10111101;
 190:	8d eb       	ldi	r24, 0xBD	; 189
 192:	f9 01       	movw	r30, r18
 194:	e0 56       	subi	r30, 0x60	; 96
 196:	ff 4f       	sbci	r31, 0xFF	; 255
 198:	80 83       	st	Z, r24
void SPISendByte(unsigned char byte);

void Framing()
{
	int i, j, k;
	for (i = 0, j = 0, k = 0; i < 32; i++)
 19a:	2f 5f       	subi	r18, 0xFF	; 255
 19c:	3f 4f       	sbci	r19, 0xFF	; 255
 19e:	20 32       	cpi	r18, 0x20	; 32
 1a0:	31 05       	cpc	r19, r1
 1a2:	8c f2       	brlt	.-94     	; 0x146 <Framing+0xe>
		else
		{
			dataRows[i] = 0b10111101;
		}
	}
}
 1a4:	08 95       	ret

000001a6 <ConfigFraming>:

void ConfigFraming()
{
	int i, j, k;
	for (i = 0, j = 0, k = 0; i < 32; i++)
 1a6:	40 e0       	ldi	r20, 0x00	; 0
 1a8:	50 e0       	ldi	r21, 0x00	; 0
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	2c c0       	rjmp	.+88     	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
	{
		if (j <= shift)
 1b4:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <shift>
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	86 17       	cp	r24, r22
 1bc:	97 07       	cpc	r25, r23
 1be:	fc f0       	brlt	.+62     	; 0x1fe <ConfigFraming+0x58>
		{
			dataRows[i] = digitNums[reg_time[j]][k];
 1c0:	fb 01       	movw	r30, r22
 1c2:	ec 56       	subi	r30, 0x6C	; 108
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	80 81       	ld	r24, Z
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	fc 01       	movw	r30, r24
 1cc:	ee 0f       	add	r30, r30
 1ce:	ff 1f       	adc	r31, r31
 1d0:	ee 0f       	add	r30, r30
 1d2:	ff 1f       	adc	r31, r31
 1d4:	e8 0f       	add	r30, r24
 1d6:	f9 1f       	adc	r31, r25
 1d8:	e0 5a       	subi	r30, 0xA0	; 160
 1da:	ff 4f       	sbci	r31, 0xFF	; 255
 1dc:	e4 0f       	add	r30, r20
 1de:	f5 1f       	adc	r31, r21
 1e0:	80 81       	ld	r24, Z
 1e2:	f9 01       	movw	r30, r18
 1e4:	e0 56       	subi	r30, 0x60	; 96
 1e6:	ff 4f       	sbci	r31, 0xFF	; 255
 1e8:	80 83       	st	Z, r24
			k++;
 1ea:	4f 5f       	subi	r20, 0xFF	; 255
 1ec:	5f 4f       	sbci	r21, 0xFF	; 255
			
			if (k == 5)
 1ee:	45 30       	cpi	r20, 0x05	; 5
 1f0:	51 05       	cpc	r21, r1
 1f2:	51 f4       	brne	.+20     	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
			{
				k = 0;
				j++;
 1f4:	6f 5f       	subi	r22, 0xFF	; 255
 1f6:	7f 4f       	sbci	r23, 0xFF	; 255
			dataRows[i] = digitNums[reg_time[j]][k];
			k++;
			
			if (k == 5)
			{
				k = 0;
 1f8:	40 e0       	ldi	r20, 0x00	; 0
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	05 c0       	rjmp	.+10     	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
				j++;
			}
		}
		else
		{
			dataRows[i] = 0xFF;
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	f9 01       	movw	r30, r18
 202:	e0 56       	subi	r30, 0x60	; 96
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	80 83       	st	Z, r24
}

void ConfigFraming()
{
	int i, j, k;
	for (i = 0, j = 0, k = 0; i < 32; i++)
 208:	2f 5f       	subi	r18, 0xFF	; 255
 20a:	3f 4f       	sbci	r19, 0xFF	; 255
 20c:	20 32       	cpi	r18, 0x20	; 32
 20e:	31 05       	cpc	r19, r1
 210:	8c f2       	brlt	.-94     	; 0x1b4 <ConfigFraming+0xe>
		else
		{
			dataRows[i] = 0xFF;
		}
	}
}
 212:	08 95       	ret

00000214 <SetTime>:

void SetTime(char h, char m, char s)
{
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	c8 2f       	mov	r28, r24
 21a:	d6 2f       	mov	r29, r22
	DS1307Write(0x00, ConvertDecToBcd(s));
 21c:	84 2f       	mov	r24, r20
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	77 df       	rcall	.-274    	; 0x110 <ConvertDecToBcd>
 222:	bc 01       	movw	r22, r24
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	31 df       	rcall	.-414    	; 0x8c <DS1307Write>
	DS1307Write(0x01, ConvertDecToBcd(m));
 22a:	8d 2f       	mov	r24, r29
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	70 df       	rcall	.-288    	; 0x110 <ConvertDecToBcd>
 230:	bc 01       	movw	r22, r24
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	2a df       	rcall	.-428    	; 0x8c <DS1307Write>
	DS1307Write(0x02, ConvertDecToBcd(h));
 238:	8c 2f       	mov	r24, r28
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	69 df       	rcall	.-302    	; 0x110 <ConvertDecToBcd>
 23e:	bc 01       	movw	r22, r24
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	23 df       	rcall	.-442    	; 0x8c <DS1307Write>
}
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	08 95       	ret

0000024c <GetTime>:

void GetTime()
{
 24c:	0f 93       	push	r16
 24e:	1f 93       	push	r17
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	1f 92       	push	r1
 256:	cd b7       	in	r28, 0x3d	; 61
 258:	de b7       	in	r29, 0x3e	; 62
	unsigned char temp, s, m, h;
	DS1307Read(0x00,&temp);
 25a:	be 01       	movw	r22, r28
 25c:	6f 5f       	subi	r22, 0xFF	; 255
 25e:	7f 4f       	sbci	r23, 0xFF	; 255
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	fc de       	rcall	.-520    	; 0x5e <DS1307Read>
	s = ConvertBcdToDec(temp);
 266:	89 81       	ldd	r24, Y+1	; 0x01
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	47 df       	rcall	.-370    	; 0xfa <ConvertBcdToDec>
 26c:	18 2f       	mov	r17, r24
	DS1307Read(0x01,&temp);
 26e:	be 01       	movw	r22, r28
 270:	6f 5f       	subi	r22, 0xFF	; 255
 272:	7f 4f       	sbci	r23, 0xFF	; 255
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	f2 de       	rcall	.-540    	; 0x5e <DS1307Read>
	m = ConvertBcdToDec(temp);
 27a:	89 81       	ldd	r24, Y+1	; 0x01
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	3d df       	rcall	.-390    	; 0xfa <ConvertBcdToDec>
 280:	08 2f       	mov	r16, r24
	DS1307Read(0x02,&temp);
 282:	be 01       	movw	r22, r28
 284:	6f 5f       	subi	r22, 0xFF	; 255
 286:	7f 4f       	sbci	r23, 0xFF	; 255
 288:	82 e0       	ldi	r24, 0x02	; 2
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	e8 de       	rcall	.-560    	; 0x5e <DS1307Read>
	h = ConvertBcdToDec(temp);
 28e:	89 81       	ldd	r24, Y+1	; 0x01
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	33 df       	rcall	.-410    	; 0xfa <ConvertBcdToDec>
	
	time[0] = h / 10;
 294:	ea e9       	ldi	r30, 0x9A	; 154
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	9d ec       	ldi	r25, 0xCD	; 205
 29a:	89 9f       	mul	r24, r25
 29c:	21 2d       	mov	r18, r1
 29e:	11 24       	eor	r1, r1
 2a0:	26 95       	lsr	r18
 2a2:	26 95       	lsr	r18
 2a4:	26 95       	lsr	r18
 2a6:	20 83       	st	Z, r18
	time[1] = h % 10;
 2a8:	22 0f       	add	r18, r18
 2aa:	32 2f       	mov	r19, r18
 2ac:	33 0f       	add	r19, r19
 2ae:	33 0f       	add	r19, r19
 2b0:	23 0f       	add	r18, r19
 2b2:	82 1b       	sub	r24, r18
 2b4:	81 83       	std	Z+1, r24	; 0x01
	time[2] = m / 10;
 2b6:	09 9f       	mul	r16, r25
 2b8:	81 2d       	mov	r24, r1
 2ba:	11 24       	eor	r1, r1
 2bc:	86 95       	lsr	r24
 2be:	86 95       	lsr	r24
 2c0:	86 95       	lsr	r24
 2c2:	82 83       	std	Z+2, r24	; 0x02
	time[3] = m % 10;
 2c4:	88 0f       	add	r24, r24
 2c6:	28 2f       	mov	r18, r24
 2c8:	22 0f       	add	r18, r18
 2ca:	22 0f       	add	r18, r18
 2cc:	82 0f       	add	r24, r18
 2ce:	08 1b       	sub	r16, r24
 2d0:	03 83       	std	Z+3, r16	; 0x03
	time[4] = s / 10;
 2d2:	19 9f       	mul	r17, r25
 2d4:	91 2d       	mov	r25, r1
 2d6:	11 24       	eor	r1, r1
 2d8:	96 95       	lsr	r25
 2da:	96 95       	lsr	r25
 2dc:	96 95       	lsr	r25
 2de:	94 83       	std	Z+4, r25	; 0x04
	time[5] = s % 10;
 2e0:	99 0f       	add	r25, r25
 2e2:	89 2f       	mov	r24, r25
 2e4:	88 0f       	add	r24, r24
 2e6:	88 0f       	add	r24, r24
 2e8:	98 0f       	add	r25, r24
 2ea:	19 1b       	sub	r17, r25
 2ec:	15 83       	std	Z+5, r17	; 0x05
}
 2ee:	0f 90       	pop	r0
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	1f 91       	pop	r17
 2f6:	0f 91       	pop	r16
 2f8:	08 95       	ret

000002fa <SetChangeButton_Pressed>:

void SetChangeButton_Pressed()
{
	if (!isConfig)
 2fa:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
 2fe:	81 11       	cpse	r24, r1
 300:	04 c0       	rjmp	.+8      	; 0x30a <SetChangeButton_Pressed+0x10>
	{
		isConfig = 1;
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
		return;
 308:	08 95       	ret
	}
	else
	{
		switch (shift)
 30a:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <shift>
 30e:	82 30       	cpi	r24, 0x02	; 2
 310:	c9 f1       	breq	.+114    	; 0x384 <SetChangeButton_Pressed+0x8a>
 312:	28 f4       	brcc	.+10     	; 0x31e <SetChangeButton_Pressed+0x24>
 314:	88 23       	and	r24, r24
 316:	61 f0       	breq	.+24     	; 0x330 <SetChangeButton_Pressed+0x36>
 318:	81 30       	cpi	r24, 0x01	; 1
 31a:	c9 f0       	breq	.+50     	; 0x34e <SetChangeButton_Pressed+0x54>
 31c:	08 95       	ret
 31e:	84 30       	cpi	r24, 0x04	; 4
 320:	09 f4       	brne	.+2      	; 0x324 <SetChangeButton_Pressed+0x2a>
 322:	54 c0       	rjmp	.+168    	; 0x3cc <SetChangeButton_Pressed+0xd2>
 324:	08 f4       	brcc	.+2      	; 0x328 <SetChangeButton_Pressed+0x2e>
 326:	3f c0       	rjmp	.+126    	; 0x3a6 <SetChangeButton_Pressed+0xac>
 328:	85 30       	cpi	r24, 0x05	; 5
 32a:	09 f4       	brne	.+2      	; 0x32e <SetChangeButton_Pressed+0x34>
 32c:	60 c0       	rjmp	.+192    	; 0x3ee <SetChangeButton_Pressed+0xf4>
 32e:	08 95       	ret
		{
			case 0:
				reg_time[0]++;
 330:	e4 e9       	ldi	r30, 0x94	; 148
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	90 81       	ld	r25, Z
 336:	9f 5f       	subi	r25, 0xFF	; 255
				reg_time[0] %= 3;
 338:	8b ea       	ldi	r24, 0xAB	; 171
 33a:	98 9f       	mul	r25, r24
 33c:	81 2d       	mov	r24, r1
 33e:	11 24       	eor	r1, r1
 340:	86 95       	lsr	r24
 342:	28 2f       	mov	r18, r24
 344:	22 0f       	add	r18, r18
 346:	82 0f       	add	r24, r18
 348:	98 1b       	sub	r25, r24
 34a:	90 83       	st	Z, r25
			break;
 34c:	08 95       	ret
			case 1:
				reg_time[1]++;
 34e:	e4 e9       	ldi	r30, 0x94	; 148
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	81 81       	ldd	r24, Z+1	; 0x01
 354:	8f 5f       	subi	r24, 0xFF	; 255
				if (reg_time[0] < 2)
 356:	90 81       	ld	r25, Z
 358:	92 30       	cpi	r25, 0x02	; 2
 35a:	80 f4       	brcc	.+32     	; 0x37c <SetChangeButton_Pressed+0x82>
					reg_time[1] %= 10;
 35c:	9d ec       	ldi	r25, 0xCD	; 205
 35e:	89 9f       	mul	r24, r25
 360:	91 2d       	mov	r25, r1
 362:	11 24       	eor	r1, r1
 364:	96 95       	lsr	r25
 366:	96 95       	lsr	r25
 368:	96 95       	lsr	r25
 36a:	99 0f       	add	r25, r25
 36c:	29 2f       	mov	r18, r25
 36e:	22 0f       	add	r18, r18
 370:	22 0f       	add	r18, r18
 372:	92 0f       	add	r25, r18
 374:	89 1b       	sub	r24, r25
 376:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <reg_time+0x1>
 37a:	08 95       	ret
				else
					reg_time[1] %= 4;
 37c:	83 70       	andi	r24, 0x03	; 3
 37e:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <reg_time+0x1>
 382:	08 95       	ret
			break;
			case 2:
				reg_time[2]++;
 384:	e4 e9       	ldi	r30, 0x94	; 148
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	92 81       	ldd	r25, Z+2	; 0x02
 38a:	9f 5f       	subi	r25, 0xFF	; 255
				reg_time[2] %= 6;
 38c:	8b ea       	ldi	r24, 0xAB	; 171
 38e:	98 9f       	mul	r25, r24
 390:	81 2d       	mov	r24, r1
 392:	11 24       	eor	r1, r1
 394:	86 95       	lsr	r24
 396:	86 95       	lsr	r24
 398:	28 2f       	mov	r18, r24
 39a:	22 0f       	add	r18, r18
 39c:	82 0f       	add	r24, r18
 39e:	88 0f       	add	r24, r24
 3a0:	98 1b       	sub	r25, r24
 3a2:	92 83       	std	Z+2, r25	; 0x02
			break;
 3a4:	08 95       	ret
			case 3:
				reg_time[3]++;
 3a6:	e4 e9       	ldi	r30, 0x94	; 148
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	93 81       	ldd	r25, Z+3	; 0x03
 3ac:	9f 5f       	subi	r25, 0xFF	; 255
				reg_time[3] %= 10;
 3ae:	8d ec       	ldi	r24, 0xCD	; 205
 3b0:	98 9f       	mul	r25, r24
 3b2:	81 2d       	mov	r24, r1
 3b4:	11 24       	eor	r1, r1
 3b6:	86 95       	lsr	r24
 3b8:	86 95       	lsr	r24
 3ba:	86 95       	lsr	r24
 3bc:	88 0f       	add	r24, r24
 3be:	28 2f       	mov	r18, r24
 3c0:	22 0f       	add	r18, r18
 3c2:	22 0f       	add	r18, r18
 3c4:	82 0f       	add	r24, r18
 3c6:	98 1b       	sub	r25, r24
 3c8:	93 83       	std	Z+3, r25	; 0x03
			break;
 3ca:	08 95       	ret
			case 4:
				reg_time[4]++;
 3cc:	e4 e9       	ldi	r30, 0x94	; 148
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	94 81       	ldd	r25, Z+4	; 0x04
 3d2:	9f 5f       	subi	r25, 0xFF	; 255
				reg_time[4] %= 6;
 3d4:	8b ea       	ldi	r24, 0xAB	; 171
 3d6:	98 9f       	mul	r25, r24
 3d8:	81 2d       	mov	r24, r1
 3da:	11 24       	eor	r1, r1
 3dc:	86 95       	lsr	r24
 3de:	86 95       	lsr	r24
 3e0:	28 2f       	mov	r18, r24
 3e2:	22 0f       	add	r18, r18
 3e4:	82 0f       	add	r24, r18
 3e6:	88 0f       	add	r24, r24
 3e8:	98 1b       	sub	r25, r24
 3ea:	94 83       	std	Z+4, r25	; 0x04
			break;
 3ec:	08 95       	ret
			case 5:
				reg_time[5]++;
 3ee:	e4 e9       	ldi	r30, 0x94	; 148
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	95 81       	ldd	r25, Z+5	; 0x05
 3f4:	9f 5f       	subi	r25, 0xFF	; 255
				reg_time[5] %= 10;
 3f6:	8d ec       	ldi	r24, 0xCD	; 205
 3f8:	98 9f       	mul	r25, r24
 3fa:	81 2d       	mov	r24, r1
 3fc:	11 24       	eor	r1, r1
 3fe:	86 95       	lsr	r24
 400:	86 95       	lsr	r24
 402:	86 95       	lsr	r24
 404:	88 0f       	add	r24, r24
 406:	28 2f       	mov	r18, r24
 408:	22 0f       	add	r18, r18
 40a:	22 0f       	add	r18, r18
 40c:	82 0f       	add	r24, r18
 40e:	98 1b       	sub	r25, r24
 410:	95 83       	std	Z+5, r25	; 0x05
 412:	08 95       	ret

00000414 <ShiftButton_Pressed>:
	}
}

void ShiftButton_Pressed()
{
	if (shift == 5) {
 414:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <shift>
 418:	85 30       	cpi	r24, 0x05	; 5
 41a:	19 f4       	brne	.+6      	; 0x422 <ShiftButton_Pressed+0xe>
		shift = 0;
 41c:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <shift>
		return;
 420:	08 95       	ret
	}
	
	shift++;
 422:	8f 5f       	subi	r24, 0xFF	; 255
 424:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <shift>
 428:	08 95       	ret

0000042a <SendByte>:
	Framing();
	PrintTime();
}

void SendByte(unsigned int byte)
{
 42a:	ac 01       	movw	r20, r24
	for (int i = 0; i < 8; i++)
 42c:	20 e0       	ldi	r18, 0x00	; 0
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	12 c0       	rjmp	.+36     	; 0x456 <SendByte+0x2c>
	{
		PORTC = (byte & 128) ? PORTC | (1 << PORTC1) : PORTC & ~(1 << PORTC1);
 432:	47 ff       	sbrs	r20, 7
 434:	03 c0       	rjmp	.+6      	; 0x43c <SendByte+0x12>
 436:	95 b3       	in	r25, 0x15	; 21
 438:	92 60       	ori	r25, 0x02	; 2
 43a:	02 c0       	rjmp	.+4      	; 0x440 <SendByte+0x16>
 43c:	95 b3       	in	r25, 0x15	; 21
 43e:	9d 7f       	andi	r25, 0xFD	; 253
 440:	95 bb       	out	0x15, r25	; 21
		PORTC |= (1 << PORTC0);
 442:	95 b3       	in	r25, 0x15	; 21
 444:	91 60       	ori	r25, 0x01	; 1
 446:	95 bb       	out	0x15, r25	; 21
		PORTC &= ~(1 << PORTC0);
 448:	95 b3       	in	r25, 0x15	; 21
 44a:	9e 7f       	andi	r25, 0xFE	; 254
 44c:	95 bb       	out	0x15, r25	; 21
		byte <<= 1;
 44e:	44 0f       	add	r20, r20
 450:	55 1f       	adc	r21, r21
	PrintTime();
}

void SendByte(unsigned int byte)
{
	for (int i = 0; i < 8; i++)
 452:	2f 5f       	subi	r18, 0xFF	; 255
 454:	3f 4f       	sbci	r19, 0xFF	; 255
 456:	28 30       	cpi	r18, 0x08	; 8
 458:	31 05       	cpc	r19, r1
 45a:	5c f3       	brlt	.-42     	; 0x432 <SendByte+0x8>
		PORTC = (byte & 128) ? PORTC | (1 << PORTC1) : PORTC & ~(1 << PORTC1);
		PORTC |= (1 << PORTC0);
		PORTC &= ~(1 << PORTC0);
		byte <<= 1;
	}
}
 45c:	08 95       	ret

0000045e <PrintTime>:

void PrintTime(void)
{
 45e:	0f 93       	push	r16
 460:	1f 93       	push	r17
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
	for (int i = 0; i < 8; i++)
 466:	00 e0       	ldi	r16, 0x00	; 0
 468:	10 e0       	ldi	r17, 0x00	; 0
 46a:	26 c0       	rjmp	.+76     	; 0x4b8 <__stack+0x59>
	{
		SendByte(1 << i);
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	00 2e       	mov	r0, r16
 472:	02 c0       	rjmp	.+4      	; 0x478 <__stack+0x19>
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	0a 94       	dec	r0
 47a:	e2 f7       	brpl	.-8      	; 0x474 <__stack+0x15>
 47c:	d6 df       	rcall	.-84     	; 0x42a <SendByte>

		for (int j = 0; j < 4; j++)
 47e:	c0 e0       	ldi	r28, 0x00	; 0
 480:	d0 e0       	ldi	r29, 0x00	; 0
 482:	0f c0       	rjmp	.+30     	; 0x4a2 <__stack+0x43>
		{
			SendByte(dataRows[j * 8 + i]);
 484:	fe 01       	movw	r30, r28
 486:	ee 0f       	add	r30, r30
 488:	ff 1f       	adc	r31, r31
 48a:	ee 0f       	add	r30, r30
 48c:	ff 1f       	adc	r31, r31
 48e:	ee 0f       	add	r30, r30
 490:	ff 1f       	adc	r31, r31
 492:	e0 0f       	add	r30, r16
 494:	f1 1f       	adc	r31, r17
 496:	e0 56       	subi	r30, 0x60	; 96
 498:	ff 4f       	sbci	r31, 0xFF	; 255
 49a:	80 81       	ld	r24, Z
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	c5 df       	rcall	.-118    	; 0x42a <SendByte>
{
	for (int i = 0; i < 8; i++)
	{
		SendByte(1 << i);

		for (int j = 0; j < 4; j++)
 4a0:	21 96       	adiw	r28, 0x01	; 1
 4a2:	c4 30       	cpi	r28, 0x04	; 4
 4a4:	d1 05       	cpc	r29, r1
 4a6:	74 f3       	brlt	.-36     	; 0x484 <__stack+0x25>
		{
			SendByte(dataRows[j * 8 + i]);
		}

		PORTC |= (1 << PORTC2);
 4a8:	85 b3       	in	r24, 0x15	; 21
 4aa:	84 60       	ori	r24, 0x04	; 4
 4ac:	85 bb       	out	0x15, r24	; 21
		PORTC &= ~(1 << PORTC2);
 4ae:	85 b3       	in	r24, 0x15	; 21
 4b0:	8b 7f       	andi	r24, 0xFB	; 251
 4b2:	85 bb       	out	0x15, r24	; 21
	}
}

void PrintTime(void)
{
	for (int i = 0; i < 8; i++)
 4b4:	0f 5f       	subi	r16, 0xFF	; 255
 4b6:	1f 4f       	sbci	r17, 0xFF	; 255
 4b8:	08 30       	cpi	r16, 0x08	; 8
 4ba:	11 05       	cpc	r17, r1
 4bc:	bc f2       	brlt	.-82     	; 0x46c <__stack+0xd>
		}

		PORTC |= (1 << PORTC2);
		PORTC &= ~(1 << PORTC2);
	}
}
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	1f 91       	pop	r17
 4c4:	0f 91       	pop	r16
 4c6:	08 95       	ret

000004c8 <ApplySetButton_Pressed>:
	
	shift++;
}

void ApplySetButton_Pressed()
{
 4c8:	cf 93       	push	r28
 4ca:	df 93       	push	r29
	int s, m, h;
	h = ((reg_time[0] * 10) + reg_time[1]);
 4cc:	c4 e9       	ldi	r28, 0x94	; 148
 4ce:	d0 e0       	ldi	r29, 0x00	; 0
 4d0:	28 81       	ld	r18, Y
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	c9 01       	movw	r24, r18
 4d6:	88 0f       	add	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	22 0f       	add	r18, r18
 4dc:	33 1f       	adc	r19, r19
 4de:	22 0f       	add	r18, r18
 4e0:	33 1f       	adc	r19, r19
 4e2:	22 0f       	add	r18, r18
 4e4:	33 1f       	adc	r19, r19
 4e6:	82 0f       	add	r24, r18
 4e8:	93 1f       	adc	r25, r19
 4ea:	99 81       	ldd	r25, Y+1	; 0x01
	m = ((reg_time[2] * 10) + reg_time[3]);
 4ec:	2a 81       	ldd	r18, Y+2	; 0x02
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	b9 01       	movw	r22, r18
 4f2:	66 0f       	add	r22, r22
 4f4:	77 1f       	adc	r23, r23
 4f6:	22 0f       	add	r18, r18
 4f8:	33 1f       	adc	r19, r19
 4fa:	22 0f       	add	r18, r18
 4fc:	33 1f       	adc	r19, r19
 4fe:	22 0f       	add	r18, r18
 500:	33 1f       	adc	r19, r19
 502:	62 0f       	add	r22, r18
 504:	73 1f       	adc	r23, r19
 506:	2b 81       	ldd	r18, Y+3	; 0x03
 508:	62 0f       	add	r22, r18
 50a:	71 1d       	adc	r23, r1
	s = ((reg_time[4] * 10) + reg_time[5]);
 50c:	2c 81       	ldd	r18, Y+4	; 0x04
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	a9 01       	movw	r20, r18
 512:	44 0f       	add	r20, r20
 514:	55 1f       	adc	r21, r21
 516:	22 0f       	add	r18, r18
 518:	33 1f       	adc	r19, r19
 51a:	22 0f       	add	r18, r18
 51c:	33 1f       	adc	r19, r19
 51e:	22 0f       	add	r18, r18
 520:	33 1f       	adc	r19, r19
 522:	42 0f       	add	r20, r18
 524:	53 1f       	adc	r21, r19
 526:	2d 81       	ldd	r18, Y+5	; 0x05
 528:	42 0f       	add	r20, r18
 52a:	51 1d       	adc	r21, r1
	
	SetTime(h, m, s);
 52c:	89 0f       	add	r24, r25
 52e:	72 de       	rcall	.-796    	; 0x214 <SetTime>
	
	shift = 0;
 530:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <shift>
	isConfig = 0;
 534:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__data_end>
	memset(reg_time, 0, sizeof(reg_time));
 538:	86 e0       	ldi	r24, 0x06	; 6
 53a:	fe 01       	movw	r30, r28
 53c:	11 92       	st	Z+, r1
 53e:	8a 95       	dec	r24
 540:	e9 f7       	brne	.-6      	; 0x53c <ApplySetButton_Pressed+0x74>
	
	GetTime();
 542:	84 de       	rcall	.-760    	; 0x24c <GetTime>
	Framing();
 544:	f9 dd       	rcall	.-1038   	; 0x138 <Framing>
	PrintTime();
 546:	8b df       	rcall	.-234    	; 0x45e <PrintTime>
}
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	08 95       	ret

0000054e <ButtonPress>:
}

void ButtonPress()
{
	unsigned char pind;
	pind = (PIND >> 3) & 0x07;
 54e:	80 b3       	in	r24, 0x10	; 16
 550:	86 95       	lsr	r24
 552:	86 95       	lsr	r24
 554:	86 95       	lsr	r24
 556:	87 70       	andi	r24, 0x07	; 7
	while ((pind == 0x07)); // ожидание отпуска кнопки.
 558:	87 30       	cpi	r24, 0x07	; 7
 55a:	f1 f3       	breq	.-4      	; 0x558 <ButtonPress+0xa>
	
	if (pind == 0x06)
 55c:	86 30       	cpi	r24, 0x06	; 6
 55e:	11 f4       	brne	.+4      	; 0x564 <ButtonPress+0x16>
	{
		SetChangeButton_Pressed();
 560:	cc de       	rcall	.-616    	; 0x2fa <SetChangeButton_Pressed>
 562:	08 95       	ret
	}
	else if (pind == 0x04)
 564:	84 30       	cpi	r24, 0x04	; 4
 566:	11 f4       	brne	.+4      	; 0x56c <ButtonPress+0x1e>
	{
		ShiftButton_Pressed();
 568:	55 df       	rcall	.-342    	; 0x414 <ShiftButton_Pressed>
 56a:	08 95       	ret
	}
	else if (pind == 0x02)
 56c:	82 30       	cpi	r24, 0x02	; 2
 56e:	09 f4       	brne	.+2      	; 0x572 <ButtonPress+0x24>
	{
		ApplySetButton_Pressed();
 570:	ab df       	rcall	.-170    	; 0x4c8 <ApplySetButton_Pressed>
 572:	08 95       	ret

00000574 <__vector_2>:
	}
}

ISR(INT1_vect)
{
 574:	1f 92       	push	r1
 576:	0f 92       	push	r0
 578:	0f b6       	in	r0, 0x3f	; 63
 57a:	0f 92       	push	r0
 57c:	11 24       	eor	r1, r1
 57e:	2f 93       	push	r18
 580:	3f 93       	push	r19
 582:	4f 93       	push	r20
 584:	5f 93       	push	r21
 586:	6f 93       	push	r22
 588:	7f 93       	push	r23
 58a:	8f 93       	push	r24
 58c:	9f 93       	push	r25
 58e:	af 93       	push	r26
 590:	bf 93       	push	r27
 592:	ef 93       	push	r30
 594:	ff 93       	push	r31
	cli();
 596:	f8 94       	cli
	GICR = 0x00;
 598:	1b be       	out	0x3b, r1	; 59
	ButtonPress();
 59a:	d9 df       	rcall	.-78     	; 0x54e <ButtonPress>
	GICR = 0xC0;
 59c:	80 ec       	ldi	r24, 0xC0	; 192
 59e:	8b bf       	out	0x3b, r24	; 59
	sei();
 5a0:	78 94       	sei
}
 5a2:	ff 91       	pop	r31
 5a4:	ef 91       	pop	r30
 5a6:	bf 91       	pop	r27
 5a8:	af 91       	pop	r26
 5aa:	9f 91       	pop	r25
 5ac:	8f 91       	pop	r24
 5ae:	7f 91       	pop	r23
 5b0:	6f 91       	pop	r22
 5b2:	5f 91       	pop	r21
 5b4:	4f 91       	pop	r20
 5b6:	3f 91       	pop	r19
 5b8:	2f 91       	pop	r18
 5ba:	0f 90       	pop	r0
 5bc:	0f be       	out	0x3f, r0	; 63
 5be:	0f 90       	pop	r0
 5c0:	1f 90       	pop	r1
 5c2:	18 95       	reti

000005c4 <__vector_1>:

ISR(INT0_vect)
{
 5c4:	1f 92       	push	r1
 5c6:	0f 92       	push	r0
 5c8:	0f b6       	in	r0, 0x3f	; 63
 5ca:	0f 92       	push	r0
 5cc:	11 24       	eor	r1, r1
 5ce:	2f 93       	push	r18
 5d0:	3f 93       	push	r19
 5d2:	4f 93       	push	r20
 5d4:	5f 93       	push	r21
 5d6:	6f 93       	push	r22
 5d8:	7f 93       	push	r23
 5da:	8f 93       	push	r24
 5dc:	9f 93       	push	r25
 5de:	af 93       	push	r26
 5e0:	bf 93       	push	r27
 5e2:	ef 93       	push	r30
 5e4:	ff 93       	push	r31
	GetTime();
 5e6:	32 de       	rcall	.-924    	; 0x24c <GetTime>
}
 5e8:	ff 91       	pop	r31
 5ea:	ef 91       	pop	r30
 5ec:	bf 91       	pop	r27
 5ee:	af 91       	pop	r26
 5f0:	9f 91       	pop	r25
 5f2:	8f 91       	pop	r24
 5f4:	7f 91       	pop	r23
 5f6:	6f 91       	pop	r22
 5f8:	5f 91       	pop	r21
 5fa:	4f 91       	pop	r20
 5fc:	3f 91       	pop	r19
 5fe:	2f 91       	pop	r18
 600:	0f 90       	pop	r0
 602:	0f be       	out	0x3f, r0	; 63
 604:	0f 90       	pop	r0
 606:	1f 90       	pop	r1
 608:	18 95       	reti

0000060a <main>:

int main()
{
	DDRD = 0x00;
 60a:	11 ba       	out	0x11, r1	; 17
	DDRB = 0xFF;
 60c:	8f ef       	ldi	r24, 0xFF	; 255
 60e:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
 610:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b11100011;
 612:	83 ee       	ldi	r24, 0xE3	; 227
 614:	81 bb       	out	0x11, r24	; 17
	PORTC = 0x00;
 616:	15 ba       	out	0x15, r1	; 21
	PORTD = 0x00;
 618:	12 ba       	out	0x12, r1	; 18
	PORTB = 0x00;
 61a:	18 ba       	out	0x18, r1	; 24
	PORTD |= (1 << PORTD3) | (1 << PORTD4) | (1 << PORTD5);
 61c:	82 b3       	in	r24, 0x12	; 18
 61e:	88 63       	ori	r24, 0x38	; 56
 620:	82 bb       	out	0x12, r24	; 18

	// Установка импульса с пина SOUT раз в секунду и включение вывода этого импульса.
	DS1307Write(0x07, 0b00010000);
 622:	60 e1       	ldi	r22, 0x10	; 16
 624:	70 e0       	ldi	r23, 0x00	; 0
 626:	87 e0       	ldi	r24, 0x07	; 7
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	30 dd       	rcall	.-1440   	; 0x8c <DS1307Write>
	
	I2CInit(); // Инициализация шины I2C
 62c:	41 dd       	rcall	.-1406   	; 0xb0 <I2CInit>
	
	GICR |= (1 << INT1) | (1 << INT0);
 62e:	8b b7       	in	r24, 0x3b	; 59
 630:	80 6c       	ori	r24, 0xC0	; 192
 632:	8b bf       	out	0x3b, r24	; 59
	MCUCR = (1 << ISC01) | (1 << ISC11); // вкл прерывание на INT0-1 при лог. 0 на порту.
 634:	8a e0       	ldi	r24, 0x0A	; 10
 636:	85 bf       	out	0x35, r24	; 53
	sei();
 638:	78 94       	sei
	
	while (1)
	{
		if (isConfig)
 63a:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
 63e:	88 23       	and	r24, r24
 640:	11 f0       	breq	.+4      	; 0x646 <main+0x3c>
		{
			ConfigFraming();	// Установка кадров режима настройки часов.
 642:	b1 dd       	rcall	.-1182   	; 0x1a6 <ConfigFraming>
 644:	01 c0       	rjmp	.+2      	; 0x648 <main+0x3e>
		}
		else
		{
			Framing();			// Установка кадров обычного режима.
 646:	78 dd       	rcall	.-1296   	; 0x138 <Framing>
		}
		
		PrintTime();			// Вывод часов.
 648:	0a df       	rcall	.-492    	; 0x45e <PrintTime>
	};
 64a:	f7 cf       	rjmp	.-18     	; 0x63a <main+0x30>

0000064c <_exit>:
 64c:	f8 94       	cli

0000064e <__stop_program>:
 64e:	ff cf       	rjmp	.-2      	; 0x64e <__stop_program>
